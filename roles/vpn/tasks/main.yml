---
- name: install OpenVPN package
  yum:
    name: openvpn-2.4.6-1.el7.x86_64
    state: present

- name: create an OpenVPN folder to store keys
  file:
    path: /etc/openvpn/keys
    state: directory
    mode: 0700

- name: check if the VPN certificate is already present
  stat:
    path: '{{ openvpn_keys_folder }}/{{ common_name }}.crt'
  register: cert_stat

- name: check if the VPN private key is already present
  stat:
    path: '{{ openvpn_keys_folder }}/{{ common_name }}.key'
  register: key_stat

- name: check if the VPN CA chain is already present
  stat:
    path: '{{ openvpn_keys_folder }}/{{ mks_vpn_pki_chain_name }}.crt'
  register: chain_stat

- set_fact:
    renew: false

- name: check if the VPN certificate is soon to expire
  command: 'openssl x509 -checkend {{ mks_vpn_cert_renew_threshold }} -noout -in {{ openvpn_keys_folder }}/{{ common_name }}.crt'
  register: cert_expiry_check
  changed_when: cert_expiry_check.rc != 0
  failed_when: cert_expiry_check.stdout_lines|length > 0
  when: (cert_stat.stat.exists == True)

- name: retrieve the Common Name of the existing certificate
  shell: "openssl x509 -noout -subject -nameopt multiline -in /etc/openvpn/keys/{{ common_name }}.crt | sed -n 's/ *commonName *= //p'"
  register: cert_common_name
  when: (cert_stat.stat.exists == True)

- set_fact:
    renew: true
  when: (cert_stat.stat.exists == false) or
        (key_stat.stat.exists == false) or
        (chain_stat.stat.exists == false) or
        (cert_expiry_check.rc != 0) or
        (cert_common_name.stdout != common_name) or
        (force_renew_vpn_keys != false)
  notify: restart OpenVPN

- name: log in Vault
  shell: '{{ vault_folder }}/approle-login.sh'
  register: approle_token
  when: renew

- name: issue a new VPN certficate from Vault
  uri:
    url: '{{ vault_url }}/v1/{{ mks_vpn_pki }}/issue/{{ mks_vpn_pki_role }}'
    method: POST
    status_code: 200
    body_format: json
    body: 
      common_name: '{{ common_name }}'
      ttl: '{{ mks_vpn_pki_ttl }}'
    headers:
      X-Vault-Token: '{{ approle_token.stdout }}'
  register: response
  when: renew

- name: parse the response and save the private key
  copy:
    content: '{{ response.json.data.private_key }}'
    dest: '{{ openvpn_keys_folder }}/{{ common_name }}.key'
  when: renew

- name: set private access to the private key file
  file:
    path: '{{ openvpn_keys_folder }}/{{ common_name }}.key'
    mode: 0600
  when: renew

- name: parse the response and save the certificate
  copy:
    content: '{{ response.json.data.certificate }}'
    dest: '{{ openvpn_keys_folder }}/{{ common_name }}.crt'
  when: renew

- name: fetch the CA chain
  uri:
    url: '{{ vault_url }}/v1/{{ mks_vpn_pki }}/ca_chain'
    method: GET
    status_code: 200
    body_format: json
    return_content: yes
  register: ca_chain
  when: renew

- name: parse the response and save the CA chain
  copy:
    content: '{{ ca_chain.content }}' 
    dest: '{{ openvpn_keys_folder }}/{{ mks_vpn_pki_chain_name }}.crt'
  when: renew

- name: save the configuration template as '{{ type }}.conf.j2'
  copy:
    content: '{{ conf_template.stdout }}'
    dest: '/tmp/{{ type }}.conf.j2'

- name: get the '{{ type }}.conf.j2' configuration template
  fetch:
    src: /tmp/{{ type }}.conf.j2
    dest: '/tmp/ansible/'

- name: remove the new line (\n) from the server ip
  shell: echo {{ server_ip }} | tr -d \n
  register: server_ip_trimed
  when: type == 'client' 

- name: save the configuration as '{{ type }}.conf'
  template:
    src: '/tmp/ansible/{{ inventory_hostname }}/tmp/{{ type }}.conf.j2'
    dest: '{{ openvpn_folder }}/{{ type }}.conf'
  notify: restart OpenVPN

- include_tasks: setup-server.yml
  when: type == 'server'

- name: set OpenVPN as a service to start at boot
  service:
    name: "openvpn@{{ type }}"
    enabled: yes